#!/usr/bin/env bash
# reqd v2.3-dev: reqd builds unix environments.
#
# Copyright (c) 2012-2018, Ron DuPlain
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# User-configurable environment variables.
declare REQD_MIRROR # Set to URL pointing to REQD_SRC directory on mirror.

# Environment variables passed to recipes. Declare now, set later.
declare REQD_PREFIX # prefix to use in installation, absolute reqd/usr (static)
declare REQD_BIN    # path to reqd/bin/ for utilities (static)
declare REQD_SBIN   # path to reqd/sbin/ for recipes (static)
declare REQD_LIB    # path to reqd/lib/, utilities for recipes (static)
declare REQD_ETC    # path to reqd/etc/, conf for recipes (static)
declare REQD_SRC    # path to reqd/src/, dest for recipe resources (static)
declare REQD_OPT    # path to reqd/opt/, in some recipe installations (static)
declare REQD_VAR    # path to reqd/var/, post-install runtime files (static)
declare REQD_J      # recommended job count for `make -j`, # CPUs -1 (static)
declare REQD_NAME   # name of recipe being called (dynamic)
declare REQD_RES    # base path where recipe resources are downloaded (dynamic)

# Functions provided to recipes written in bash.
#
# Silence output in case reqd is calling itself.
declare -f reqd_echo                 > /dev/null
declare -f reqd_error                > /dev/null
declare -f reqd_main                 > /dev/null
declare -f reqd_ls                   > /dev/null
declare -f reqd_run_only_once        > /dev/null
declare -f reqd_run_once             > /dev/null
declare -f reqd_newer_than           > /dev/null

# Implementation details exposed in environment, set in main function.
declare REQD_DIR
declare REQD_VERBOSE
declare REQD_INVOCATION

# The name of this executable program, set in main function.
declare PROG

# Internal stack of shell expressions to call via bash traps when closing reqd.
declare -a REQD_TRAPS

usage() {
    # Print reqd program usage to stderr and return 2.

    exec >&2 # Redirect all further stdout to stderr.

    if [ $# -gt 0 ]; then
        # Print message argument, if given.
        echo "$@"
        echo
    fi

    echo "usage: $PROG <command>"
    echo
    echo "Configuration environment variables:"
    echo_environment
    echo
    echo "Commands:"
    echo "install     - Install recipes found in sbin."
    echo "download    - Download all resources declared by sbin recipes."
    return 2
}


# Begin functions exported to recipes written in bash.
#
# Note that these recipes run in a separate bash process.

reqd_echo() {
    # Echo all arguments on a single line, prefixed by $REQD_NAME.
    #
    # Does nothing if not in verbose mode.

    if [ -z "$REQD_VERBOSE" ]; then
        return
    fi

    # See parameter expansion note in main().
    local name=${REQD_NAME:-$PROG}
    echo "$name: $@"
}

reqd_error() {
    # Echo all arguments on a single line to stderr, prefixed by $REQD_NAME.
    #
    # Be sure to return/exit with an error code if applicable, after calling.

    # See parameter expansion note in main().
    local name=${REQD_NAME:-$PROG}
    echo "$name: $@" >&2
}

reqd_main() {
    # A main routine usable by recipes written in bash.

    local command=$1
    shift

    local command_type=`type -t $command`

    # Exit immediately if a command error or non-zero return occurs.
    set -e

    if [ -z "$command_type" ]; then
        reqd_error "$command is not implemented."
        return 127
    elif [ "$command_type" != "function" ]; then
        reqd_error "$command is not a valid command."
        return 2
    fi

    $command "$@"
}

reqd_ls() {
    # Return success if file exists, error if not.
    #
    # Programs ls and file are more readable, but they have output by default
    # and therefore are verbose during typical reqd execution. This custom
    # implementation also provides name-prefixed logging.

    for path in "$@"; do
        # Use -e test instead of `ls` to catch bad symlinks.
        if [ -e $path ]; then
            reqd_echo "$path exists."
            return 0
        else
            reqd_error "$path does not exist."
            return 1
        fi
    done
}

reqd_run_only_once() {
    # Return success if current recipe has been run at least once ever.

    if [ -z "$REQD_NAME" ]; then
        reqd_error REQD_NAME is unset in reqd_run_only_once.
        return 3
    fi

    local event=$REQD_VAR/events/$REQD_NAME
    if [ ! -e $event ]; then
        # Current event does not exist.
        return 1
    fi

    return 0
}

reqd_run_once() {
    # Return success if current recipe has been run since modified.

    if [ -z "$REQD_NAME" ]; then
        reqd_error REQD_NAME is unset in reqd_run_once.
        return 3
    fi

    local event=$REQD_VAR/events/$REQD_NAME
    if [ ! -e $event ]; then
        # Current event does not exist.
        return 1
    fi

    if [ $event -ot $REQD_SBIN/$REQD_NAME ]; then
        # Current event is older than recipe.
        return 4
    fi

    return 0
}

reqd_newer_than() {
    # Return success if current recipe's install is newer than arguments.
    #
    # Current recipe is designated by $REQD_NAME.
    #
    # Arguments can be the name of a local reqd recipe or a filepath. Specify a
    # recipe name to refer to the time when that recipe was installed. Specify
    # a filepath to refer to that file's modified time. $REQD_VAR/events has
    # touched event files with the same name as the recipe and modified times
    # matching the last successful install of that recipe.
    #
    # Note: when a file in the current $REQD_SRC directory matches the name of
    # a recipe, that file's modification time is used instead of the recipe
    # event.

    if [ -z "$REQD_NAME" ]; then
        reqd_error REQD_NAME is unset in reqd_newer_than.
        return 3
    fi

    local event=$REQD_VAR/events/$REQD_NAME
    if [ ! -e $event ]; then
        # Current event does not exist; abort now.
        return 1
    fi

    for arg in "$@"; do
        if [ -e $arg ]; then
            # Argument points to an existing file.
            : # pass.
        elif [ -e $REQD_VAR/events/$arg ]; then
            # Argument refers to a reqd event file.
            arg=$REQD_VAR/events/$arg
        else
            reqd_error "no file or event: $arg"
            return 2
        fi

        if [ ! $event -nt $arg ]; then
            # Found an argument newer than current event.
            return 1
        fi
    done

    if [ $event -ot $REQD_SBIN/$REQD_NAME ]; then
        # Current event is older than recipe.
        return 4
    fi
}


# Begin per-recipe functions.
#
# Each function here follows the same convention: take the path to the recipe
# executable as an argument, and if no argument is given, print a short
# (typically one word) user-friendly label of the function's purpose -- to
# support introspection.

quick_check() {
    # Run `exe check` silently.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo quick check # declare this function's purpose
        return
    fi

    $exe check > /dev/null 2>&1
}

install_recipe() {
    # Downloads resources specified by `exe resources` then runs `exe install`.
    #
    # The install subcommand runs in directory where resources are downloaded.
    # Does nothing if `exe check` reports success (0 status).

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo install # declare this function's purpose
        return
    fi

    # Make sure the events directory exists.
    mkdir -p $REQD_VAR/events

    reqd_echo "checking..."
    if $exe check; then
        reqd_echo "already installed."
    else
        # Essential '&&': execution stops immediately on error with 'set -e'.
        download_recipe_resources $exe &&
        run_recipe_pretest $exe &&
        run_recipe_install $exe &&
        touch $REQD_VAR/events/$REQD_NAME # See reqd_newer_than.
    fi
}

download_recipe_resources() {
    # Download resources specified by the recipe's 'resource' command.
    #
    # Resources are specified by `exe resources`, providing via stdout newline
    # (\n) delimited URLs with an optional local name, in the format of one of:
    #
    #     URL
    #     URL LOCAL_NAME
    #     URL LOCAL_NAME sha1 SHA1_CHECKSUM
    #
    # For example:
    #
    #     http://example.com/recipe.tar.gz
    #     http://example.com/1.0/recipe.tar.gz recipe-1.0.tar.gz
    #     http://example.com/1.0/recipe.tar.gz recipe-1.0.tar.gz sha1 c0ffee
    #
    # In the first case, the remote name of recipe.tar.gz is used locally. In
    # the second case, the remote file is downloaded locally to a file named
    # recipe-1.0.tar.gz. In the third case, the local file is also checked to
    # match the given SHA1 checksum; if it does not match, the download fails
    # and the file is deleted.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo download # declare this function's purpose
        return
    fi

    # Keep local on its own line to capture the exit code of the subshell.
    # Note that 'local' itself returns 0, swallowing the exit code in effect.
    local resources
    resources=$( $exe resources )
    local resources_exit=$?

    # Expose errors which occured in calling the resources subcommand.
    # Status code 0 is success and 127 is not implemented.
    if [ $resources_exit -ne 0 ] && [ $resources_exit -ne 127 ]; then
        reqd_error "resources failed with non-zero status: $resources_exit"
        return $resources_exit
    fi

    # Stop now if there are no resources to download.
    if [ -z "$resources" ]; then
        reqd_echo "no resources to download."
        return
    fi

    # Log each resource, prefixed by the reqd name.
    reqd_echo "resources:"
    map_lines reqd_echo "$resources"

    mkdir -p $REQD_RES

    pushd $REQD_RES > /dev/null

    # Download each resource.
    map_lines download_resource "$resources"
    local result=$?
    if [ $result -ne 0 ]; then
        reqd_error "failed to download."
        return $result
    fi

    # Count the number of lines.
    local -i count=`echo "$resources" | wc -l`

    if [ $count -eq 1 ]; then
        reqd_echo "finished download, 1 resource."
    else
        reqd_echo "finished download, $count resources."
    fi

    popd > /dev/null
}

download_resource() {
    # Peform download, run for each line in the resources output.

    # Understanding arrays in bash:
    #
    # Mind the syntax. Set and access as follows.
    #
    #     array=( some things )
    #     ${array[*]} # "some things"
    #     ${array[0]} # "some"
    #     ${array[1]} # "things"
    #     ${array[2]} # ""
    #
    # Get array length with ${#array[@]}.

    # Full line is passed in as argument.
    local resource=$@

    # Pull tokens into array.
    local tokens=( $resource )

    # Flight check.
    if [ ${#tokens[@]} -eq 0 ]; then
        reqd_error "$REQD_NAME: No argument given to `download_resource`."
        return 3
    elif [ ${#tokens[@]} -eq 3 ] || [ ${#tokens[@]} -gt 4 ]; then
        reqd_error "$REQD_NAME: resource error - incorrect format: $resource"
        reqd_error "URL LOCAL_NAME sha1 SHA1_CHECKSUM"
        return 3
    fi

    # Parse tokens.
    local url=${tokens[0]}
    local local_name="${tokens[1]}"
    local checksum_function=${tokens[2]}
    local checksum_value=${tokens[3]}

    # Parse remote name from URL.
    local remote_name="$( basename "$url" )"

    # If local name is not given, use remote name.
    if [ -z "$local_name" ]; then
        local_name=$remote_name
    fi

    # Swap out given URL with mirror if configured.
    if [ -n "$REQD_MIRROR" ]; then
        url="$REQD_MIRROR/$REQD_NAME/$local_name"
    fi

    if [ -e "$local_name" ]; then
        reqd_echo "using existing $local_name"
    else
        push_trap reject_file "$local_name"
        reqd_echo "downloading $local_name from $url"
        curl -L -o "$local_name" $url # Use '-L' to follow redirects.
        if [ -z "${checksum_function}${checksum_value}" ]; then
            reqd_echo "no checksum given; using without checking: $local_name"
        elif ! checksum "$local_name" $checksum_function $checksum_value; then
            reqd_error "download failed checksum: $local_name"
            return 1
        fi
        pop_trap
    fi
}

run_recipe_pretest() {
    # Run `exe pretest` in the recipe's resource directory.
    #
    # This resource directory will have anything downloaded for the recipe, and
    # is still created if no resources are needed, to allow the recipe to
    # create any scratch or temporary files.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo pretest # declare this function's purpose
        return
    fi

    mkdir -p $REQD_RES
    pushd $REQD_RES > /dev/null

    local result=0
    reqd_echo "running pretest..."
    if $exe pretest; then
        reqd_echo "pretest passed."
    elif [ $? -eq 127 ]; then
        # Not implemented; still returns 0 in run_recipe_pretest.
        # reqd_main already calls reqd_error with log message.
        pass
    else
        result=$?
        reqd_error "pretest failed with non-zero status: $result"
    fi

    popd > /dev/null
    return $result
}

run_recipe_install() {
    # Run `exe install` in the recipe's resource directory.
    #
    # This resource directory will have anything downloaded for the recipe, and
    # is still created if no resources are needed, to allow the recipe to
    # create any scratch or temporary files.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo install # declare this function's purpose
        return
    fi

    mkdir -p $REQD_RES
    pushd $REQD_RES > /dev/null

    local result=0
    reqd_echo "installing..."
    if $exe install; then
        reqd_echo "installed."
    else
        result=$?
        reqd_error "install had non-zero status: $result"
    fi

    popd > /dev/null
    return $result
}


# Begin essential utilities for reqd main program.

map_recipes() {
    # Execute <first_argument> for each executable in <second_argument> string.
    #
    # Stop at first failed execution, returning the corresponding exit code.
    #
    # This is useful in mapping the given function to all executables in the
    # reqd sbin directory. Note that the executable paths must be absolute if
    # current working directory changes during the execution of the mapped
    # function.
    #
    # For each executable found, run: `command path/to/executable`.

    local command=$1
    shift

    local label=`$command`

    local count=0
    for exe in $@; do
        # Don't set REQD_NAME before continue statements.
        local name="$( basename "$exe" )"

        # Skip empty glob '*' and reserved keywords: reqd, all.
        if [ "$name" = "*" ]; then
            continue
        elif [ "$name" = "$PROG" ]; then
            continue
        elif [ "$name" = "all" ]; then
            continue
        fi

        # Set per-recipe variables.
        export REQD_NAME="$name"
        export REQD_RES=$REQD_SRC/$REQD_NAME

        if [ -x $exe ]; then
            let count=count+1
            export REQD_NAME="$( basename "$exe" )"

            # Test for recipe exit code explicitly. Reasons:
            #
            # 1. 'set -e' has curious behavior for deeply nested commands.
            # 2. Enable override of 'set -e' to continue on recipe failure.
            if $command $exe; then
                pass
            else
                # Stop now since an execution failed, returning exit code.
                return $?
            fi
        elif [ -e $exe ]; then
            reqd_error "$exe is not executable; skipping."
        else
            reqd_error "$exe does not exist."
            return 3
        fi

        unset REQD_NAME REQD_RES
    done

    if [ $count -eq 0 ]; then
        reqd_error "nothing to run; no recipes found in $REQD_SBIN."
        return 3
    elif [ $count -eq 1 ]; then
        reqd_echo "finished $label with $count recipe."
    else
        reqd_echo "finished $label with $count recipes."
    fi
}

map_lines() {
    # Execute <first_argument> for each line in <second_argument> string.
    #
    # Understanding the internal field separator (IFS) in bash:
    #
    # The IFS is used in word splitting. To split across lines in a string, a
    # for-loop can simply iterate across that string with IFS set to the
    # newline character. IFS must be restored to support normal operation of
    # any further commands.

    local line_function=$1
    local lines="$2"
    shift 2

    local OLD_IFS="$IFS"
    local NEW_IFS=$'\n' # Specifying ANSI escaped char requires $'string' form.

    IFS="$NEW_IFS"
    local count=0
    for line in $lines; do
        IFS="$OLD_IFS"
        $line_function $line
        local result=$?
        IFS="$NEW_IFS"
        if [ $result -ne 0 ]; then
            # Ensure errors do not get swallowed in this loop.
            return $result
        fi
    done
    IFS="$OLD_IFS"
}

expand_executable_paths() {
    # Expand executable paths "foo bar" to "$REQD_SBIN/foo $REQD_SBIN/bar".

    for name in $@; do
        if [ "$name" = "all" ]; then
            # all is an alias for all executables in $REQD_SBIN.
            echo "$REQD_SBIN/*"
        else
            echo $REQD_SBIN/$name
        fi
    done
}

echo_environment() {
    # Print static environment variables to stdout.

    echo "REQD_PREFIX: $REQD_PREFIX"
    echo "REQD_BIN:    $REQD_BIN"
    echo "REQD_SBIN:   $REQD_SBIN"
    echo "REQD_LIB:    $REQD_LIB"
    echo "REQD_ETC:    $REQD_ETC"
    echo "REQD_SRC:    $REQD_SRC"
    echo "REQD_OPT:    $REQD_OPT"
    echo "REQD_VAR:    $REQD_VAR"
    echo "REQD_J:      $REQD_J"
    echo "REQD_MIRROR: $REQD_MIRROR"
}

checksum() {
    # Verify checksum of file, exiting non-zero if hash does not match.

    if [ $# -ne 3 ]; then
        stderr "usage: checksum FILENAME sha1|sha256|... HASH"
        return 2
    fi

    local filepath="$1"
    local hash_algorithm="$2"
    local hash_value="$3"
    shift 3

    case "$hash_algorithm" in
        "md5" | "sha1" | "sha224" | "sha256" | "sha384" | "sha512")
            local dgst_value
            dgst_value=$(openssl_dgst "$filepath" $hash_algorithm) || return $?

            # Print a legible standalone section of checksum values to stderr.
            local pad
            case "$hash_algorithm" in
                "md5")
                    pad='----'
                    ;;
                "sha1")
                    pad='---'
                    ;;
                *)
                    pad='-'
                    ;;
            esac
            reqd_error "--- $hash_algorithm $pad$(repleat '-' $dgst_value)"
            reqd_error "expected:   $hash_value"
            reqd_error "downloaded: $dgst_value"
            reqd_error "------------$(repleat '-' $dgst_value)"

            if [ "$hash_value" != "$dgst_value" ]; then
                reqd_error "error: $hash_algorithm mismatch."
                return 1
            fi

            # Success. Provide suggestion to upgrade on weaker algorithms.
            case "$hash_algorithm" in
                "md5" | "sha1")
                    reqd_error "Using $hash_algorithm. Next time use:"
                    reqd_error
                    reqd_error "    sha256 $(openssl_dgst "$filepath" sha256)"
                    reqd_error
                    reqd_error "... assuming no $hash_algorithm collision."
                ;;
            esac
            ;;
        * )
            echo "checksum: unknown hash algorithm: $hash_algorithm" >&2
            return 2
            ;;
    esac
}

openssl_dgst() {
    # Print openssl digest value of file checksum to stdout.
    #
    # Unlike `checksum`, this does not validate selection of given algorithm.

    if [ $# -ne 2 ]; then
        reqd_error "usage: openssl_dgst FILENAME sha1|sha256|..."
        return 2
    fi

    local filepath="$1"
    local hash_algorithm="$2"
    shift 2

    check_for_program openssl
    check_for_program awk tr

    local dgst_output=$(openssl dgst -$hash_algorithm "$filepath")
    local dgst_exit=$?

    if [ $dgst_exit -ne 0 ]; then
        reqd_error "openssl dgst failed with non-zero status: $dgst_exit"
        return $dsgt_exit
    fi

    # Parse checksum output and trim spaces.
    local dgst_value
    dgst_value=$(echo "$dgst_output" | awk -F= '{ print $2 }')
    dgst_value=$(echo "$dgst_value" | tr -d '[:space:]')

    if [ -z "$dgst_value" ]; then
        reqd_error "Unable to parse hash value from openssl dgst call."
        return 3
    fi

    echo $dgst_value
}

repleat() {
    # Echo repeat replacement character for the width of given value.

    local replacement="$1"
    shift

    check_for_program tr
    echo "$@" | tr '[:print:]' "$replacement"
}

processor_count() {
    # Print processor count to stdout, blank if unknown.
    #
    # Given platform specifics, this tries multiple methods.

    local cpus=$( getconf _NPROCESSORS_ONLN 2> /dev/null )

    if [ -n "$cpus" ]; then
        echo "$cpus"
    else
        sysctl hw.ncpu 2> /dev/null | awk '{ print $2 }'
    fi
}

set_reqd_j() {
    # Set REQD_J.

    local j
    local cpus=$( processor_count )

    if [ -n "$cpus" ]; then
        let j=cpus-1
    else
        j=1
    fi

    if [ $j -lt 1 ]; then
        j=1
    fi

    REQD_J=${REQD_J:-$j}
}

check_for_program() {
    # Check requirements. Verify each of the given programs is installed.
    #
    # Check for program dependencies granularly, which is useful when there are
    # features of reqd which are not essential for simple operations, to check
    # for dependencies lazily.

    for program in $@; do
        if ! which $program > /dev/null; then
            reqd_error "requires '$program' program, but could not find it."
            return 3
        fi
    done
}

reject_file() {
    # Reject given file, by renaming it with a .rej extension.

    local filepath="$@"
    if [ -e "$filepath" ]; then
        mv -v "$filepath" "$filepath".rej
    fi
}

pass() {
    # No operation.

    :
}


# Begin trap functions to run when reqd is finishing execution.

reqd_trap_int() {
    # Execute on INT signal.

    reqd_echo Interrupted.
}

reqd_trap_term() {
    # Execute on TERM signal.

    reqd_echo Terminated.
}

push_trap() {
    # Push a shell expression onto reqd bash trap stack.

    local index=${#REQD_TRAPS[@]}
    REQD_TRAPS[$index]="$@;"
}

pop_trap() {
    # Pop most recent shell expression from reqd bash trap stack.

    # bash 4.3+ supports -1 to get last value,
    # but reqd supports older versions of bash.
    local index=${#REQD_TRAPS[@]}
    let index=index-1
    unset REQD_TRAPS[$index]
}

reset_traps() {
    # Reset reqd bash traps, clearing effect of all add_trap calls.

    unset REQD_TRAPS

    trap 'eval "${REQD_TRAPS[@]}"; unset REQD_TRAPS; reqd_trap_int' INT
    trap 'eval "${REQD_TRAPS[@]}"; unset REQD_TRAPS; reqd_trap_term' TERM
    trap 'eval "${REQD_TRAPS[@]}"; unset REQD_TRAPS' EXIT ERR
}

# Begin user-exposed subcommands.

install() {
    # Find all recipes, download their resources, then install them.

    local paths=""
    if [ $# -eq 0 ]; then
        paths="`expand_executable_paths all`"
    else
        paths="`expand_executable_paths "$@"`"
    fi

    # Stop now if there's no work to do.
    if map_recipes quick_check $paths > /dev/null 2>&1; then
        reqd_echo "Everything checks out; no work to do."
        return
    fi

    # Since there is work to do, default to verbose.
    export REQD_VERBOSE=${REQD_VERBOSE:-"true"}

    # Create additional directories.
    mkdir -p $REQD_OPT
    mkdir -p $REQD_VAR

    # Install.
    map_recipes install_recipe $paths
}

download() {
    # Find all recipes and download their resources.

    # Default to verbose.
    export REQD_VERBOSE=${REQD_VERBOSE:-"true"}

    check_for_program curl

    if [ $# -eq 0 ]; then
        map_recipes download_recipe_resources `expand_executable_paths all`
    else
        map_recipes download_recipe_resources `expand_executable_paths "$@"`
    fi
}


# Begin main.

main() {
    # The main routine of the reqd program itself.

    # Capture full program invocation for debugging.
    REQD_INVOCATION="${BASH_SOURCE[0]} $*"

    # The name of this executable program.
    PROG="$( basename "${BASH_SOURCE[0]}" )"

    # If REQD_DIR is already set in the environment, use that value.
    if [ -z "$REQD_DIR" ]; then
        local main_dir="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        REQD_DIR="$( dirname "$main_dir" )"
    fi

    # Set configuration environment variables.
    #
    # Each of the documented user-facing variables are user-configurable, using
    # the environment variable if set or reqd's default otherwise. Therefore,
    # each of the variables are set with default value parameter expansion
    # below.
    #
    # Understanding Parameter Expansion in bash:
    #
    #     ${parameter:-word}
    #         Use Default Values. If parameter is unset or null, the expansion
    #         of word is substituted. Otherwise, the value of parameter is
    #         substituted.
    REQD_PREFIX=${REQD_PREFIX:-$REQD_DIR/usr}
    REQD_BIN=${REQD_BIN:-$REQD_DIR/bin}
    REQD_SBIN=${REQD_SBIN:-$REQD_DIR/sbin}
    REQD_LIB=${REQD_LIB:-$REQD_DIR/lib}
    REQD_ETC=${REQD_ETC:-$REQD_DIR/etc}
    REQD_SRC=${REQD_SRC:-$REQD_DIR/src}
    REQD_OPT=${REQD_OPT:-$REQD_DIR/opt}
    REQD_VAR=${REQD_VAR:-$REQD_DIR/var}

    # Verbose mode.
    # When reqd gets a full command-line parser, this could look for '-v'.
    REQD_VERBOSE=${REQD_VERBOSE:-""}

    # Set job hint to allow recipes to call `make -j $REQD_J` if desired.
    set_reqd_j

    # Initialize bash traps.
    reset_traps

    # Exit immediately if a command error or non-zero return occurs.
    set -e

    # Print usage and exit if there are no arguments.
    if [ $# -eq 0 ]; then
        usage
    fi

    local command=$1
    shift

    if [ "`type -t $command`" != "function" ]; then
        usage "$PROG: $command is not a valid command."
    fi

    check_for_program basename dirname wc touch

    # Export reqd environment variables for use in recipes.
    export REQD_PREFIX
    export REQD_BIN REQD_SBIN REQD_LIB REQD_ETC REQD_SRC REQD_OPT REQD_VAR
    export REQD_J
    export REQD_DIR REQD_VERBOSE REQD_INVOCATION

    # Export utility functions for use in recipes written in bash.
    export -f reqd_echo reqd_error reqd_main
    export -f reqd_ls reqd_run_only_once reqd_run_once reqd_newer_than

    # Prefix PATH with REQD_BIN directory.
    export PATH=$REQD_BIN:$PATH

    $command "$@"
}

main "$@"
